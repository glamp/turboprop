# pyproject.toml: Python project configuration and dependency management
# This file defines the project metadata, dependencies, and build configuration
# for the turboprop code indexing and search system.

[project]
name = "turboprop"
version = "0.3.2"
description = "Lightning-fast semantic code search and indexing with DuckDB vector operations"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Greg Lamp", email = "greg@example.com"}
]
keywords = ["code", "search", "semantic", "embedding", "mcp", "ai", "indexing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"

# Core dependencies for the code indexing and search functionality
dependencies = [
    # Database and storage
    "duckdb>=1.3.2",        # Fast analytical database for storing file content and embeddings
    
    # Web API framework  
    "fastapi>=0.116.1",     # Modern, fast web framework for building the HTTP API
    "uvicorn>=0.35.0",      # ASGI server for running the FastAPI application
    
    # Machine learning and vector search
    "sentence-transformers>=5.0.0",  # Pre-trained models for generating semantic embeddings
    "transformers>=4.53.2",          # Underlying ML framework for sentence-transformers
    
    # File system monitoring
    "watchdog>=6.0.0",      # Cross-platform file system event monitoring for watch mode
    
    # Progress bars and CLI utilities
    "tqdm>=4.65.0",         # Progress bars for better user experience
    
    # Configuration file support
    "PyYAML>=6.0",          # YAML configuration file parsing
    
    # Model Context Protocol server
    "mcp>=1.0.0",           # MCP SDK for building MCP servers
]

[project.urls]
Homepage = "https://github.com/glamp/turboprop"
Repository = "https://github.com/glamp/turboprop"
Issues = "https://github.com/glamp/turboprop/issues"

# Development dependencies
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",        # Testing framework
    "pytest-cov>=4.0.0",    # Coverage reporting
]

# Test configuration - optimized for speed
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",                          # Show all test results except passed
    "-q",                           # Quiet output
    "--tb=short",                   # Short traceback format
    "--strict-markers",             # Require explicit marker registration
    "--disable-warnings",           # Disable warnings for speed
    "--ignore=tests/performance/",  # Skip slow performance tests by default
    "--ignore=tests/docker/",       # Skip slow docker tests by default
    "-x",                          # Stop on first failure
]
testpaths = ["tests", "turboprop"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmarks (deselect with '-m \"not benchmark\"')", 
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
cache_dir = ".pytest_cache"

# Command-line entry points
[project.scripts]
turboprop = "turboprop.code_index:main"
turboprop-mcp = "turboprop.mcp_server:main"
turboprop-server = "turboprop.server:main"

# Build system configuration
[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "twine>=6.1.0",
]

# Setuptools configuration
[tool.setuptools]
packages = ["turboprop"]

[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
turboprop = ["py.typed"]

# Black configuration for consistent code formatting
[tool.black]
line-length = 120
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  __pycache__|
  \.git|
  \.pytest_cache|
  \.venv|
  example-codebases/
)/
'''

# isort configuration for consistent import sorting
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "debug_search.py",           # Temporary debugging file
    "test_mcp.py",               # Test files in root
    "test_mcp_quick.py",         # Test files in root
    "turboprop/__main__.py",     # Simple entry point
    "turboprop/__init__.py",     # Package init
    "turboprop/_version.py",     # Version file
    "example-codebases/*",       # Example data
    "scripts/*",                 # Build scripts
    "setup.py",                  # Legacy setup
    "file_watching.py",          # File watching requires complex async testing
    "mcp_server.py",             # MCP server requires specialized MCP test environment
    "format_utils.py",           # Simple utility functions
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
